{"id":"../node_modules/react-textfit/lib/utils/series.js","dependencies":[{"name":"/Users/smurali/Documents/my_portfolio/package.json","includedInParent":true,"mtime":1541126670979},{"name":"/Users/smurali/Documents/my_portfolio/node_modules/react-textfit/package.json","includedInParent":true,"mtime":1541126669955},{"name":"/Users/smurali/Documents/my_portfolio/node_modules/react-textfit/.babelrc","includedInParent":true,"mtime":1497004458000},{"name":"process","loc":{"line":8,"column":23},"parent":"/Users/smurali/Documents/my_portfolio/node_modules/react-textfit/lib/utils/series.js","resolved":"/Users/smurali/Documents/my_portfolio/node_modules/process/browser.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = series;\n\nvar _process = require('process');\n\nvar _process2 = _interopRequireDefault(_process);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction series(tasks, cb) {\n    var results = [];\n    var current = 0;\n    var isSync = true;\n\n    function done(err) {\n        function end() {\n            if (cb) cb(err, results);\n        }\n        if (isSync) _process2.default.nextTick(end);else end();\n    }\n\n    function each(err, result) {\n        results.push(result);\n        if (++current >= tasks.length || err) done(err);else tasks[current](each);\n    }\n\n    if (tasks.length > 0) tasks[0](each);else done(null);\n\n    isSync = false;\n} /**\n   * Run the functions in the tasks array in series, each one running once the previous function has completed.\n   * If any functions in the series pass an error to its callback, no more functions are run,\n   * and callback is immediately called with the value of the error. Otherwise, callback receives an array of results\n   * when tasks have completed.\n   * Taken from https://github.com/feross/run-series\n   *\n   * @params {Array} tasks An array containing functions to run, each function is passed a callback(err, result) which it must call on completion with an error err (which can be null) and an optional result value.\n   * @params {Function} callback(err, results) - An optional callback to run once all the functions have completed. This function gets a results array containing all the result arguments passed to the task callbacks.\n   */","map":{"mappings":[{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/react-textfit/lib/utils/series.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"../node_modules/react-textfit/lib/utils/series.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = series;\n\nvar _process = require('process');\n\nvar _process2 = _interopRequireDefault(_process);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction series(tasks, cb) {\n    var results = [];\n    var current = 0;\n    var isSync = true;\n\n    function done(err) {\n        function end() {\n            if (cb) cb(err, results);\n        }\n        if (isSync) _process2.default.nextTick(end);else end();\n    }\n\n    function each(err, result) {\n        results.push(result);\n        if (++current >= tasks.length || err) done(err);else tasks[current](each);\n    }\n\n    if (tasks.length > 0) tasks[0](each);else done(null);\n\n    isSync = false;\n} /**\n   * Run the functions in the tasks array in series, each one running once the previous function has completed.\n   * If any functions in the series pass an error to its callback, no more functions are run,\n   * and callback is immediately called with the value of the error. Otherwise, callback receives an array of results\n   * when tasks have completed.\n   * Taken from https://github.com/feross/run-series\n   *\n   * @params {Array} tasks An array containing functions to run, each function is passed a callback(err, result) which it must call on completion with an error err (which can be null) and an optional result value.\n   * @params {Function} callback(err, results) - An optional callback to run once all the functions have completed. This function gets a results array containing all the result arguments passed to the task callbacks.\n   */"},"lineCount":43}},"hash":"e191485d92af6fd2dc99f3f76fbc9596","cacheData":{"env":{}}}